{"version":3,"sources":["Search.js","NavBar.js","Grapher.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["indexjson","require","renderRow","props","data","index","style","React","cloneElement","top","OuterElementContext","createContext","OuterElementType","forwardRef","ref","outerProps","useContext","ListboxComponent","children","other","itemData","Children","toArray","theme","useTheme","smUp","useMediaQuery","breakpoints","up","noSsr","itemCount","length","itemSize","getChildSize","child","isValidElement","type","ListSubheader","Provider","value","height","map","reduce","a","b","width","key","outerElementType","innerElementType","overscanCount","useStyles","makeStyles","listbox","padding","margin","console","time","idx","elasticlunr","Index","load","renderGroup","params","component","filterOptions","options","query","inputValue","search","bool","expand","score","documentStore","getDoc","VirtualizedSearch","classes","Autocomplete","id","disableListWrap","disableOpenOnFocus","renderInput","TextField","variant","label","fullWidth","renderOption","option","Typography","noWrap","course_name","getOptionLabel","onChange","event","setSearchTerm","searchTerm","root","flexGrow","menuButton","marginRight","spacing","title","display","position","marginleft","marginright","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","searchIcon","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","transition","transitions","create","SearchAppBar","className","AppBar","Toolbar","Grapher","textAlign","href","course_nbr","prof","names","x","y","log","paddingTop","xType","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.272dfdda.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport { useTheme, makeStyles } from '@material-ui/core/styles';\nimport { VariableSizeList } from 'react-window';\nimport { Typography } from '@material-ui/core';\nimport elasticlunr from 'elasticlunr';\nconst indexjson =  require('./data/index.json');\n\n\nconst LISTBOX_PADDING = 8; // px\n\nfunction renderRow(props) {\n  const { data, index, style } = props;\n  return React.cloneElement(data[index], {\n    style: {\n      ...style,\n      top: style.top + LISTBOX_PADDING,\n    },\n  });\n}\n\nconst OuterElementContext = React.createContext({});\n\nconst OuterElementType = React.forwardRef((props, ref) => {\n  const outerProps = React.useContext(OuterElementContext);\n  return <div ref={ref} {...props} {...outerProps} />;\n});\n\n// Adapter for react-window\nconst ListboxComponent = React.forwardRef(function ListboxComponent(props, ref) {\n  const { children, ...other } = props;\n  const itemData = React.Children.toArray(children);\n  const theme = useTheme();\n  const smUp = useMediaQuery(theme.breakpoints.up('sm'), { noSsr: true });\n  const itemCount = itemData.length;\n  const itemSize = smUp ? 36 : 48;\n\n  const getChildSize = child => {\n    if (React.isValidElement(child) && child.type === ListSubheader) {\n      return 48;\n    }\n\n    return itemSize;\n  };\n\n  const getHeight = () => {\n    if (itemCount > 8) {\n      return 8 * itemSize;\n    }\n    return itemData.map(getChildSize).reduce((a, b) => a + b, 0);\n  };\n\n  return (\n    <div ref={ref}>\n      <OuterElementContext.Provider value={other}>\n        <VariableSizeList\n          itemData={itemData}\n          height={getHeight() + 2 * LISTBOX_PADDING}\n          width=\"100%\"\n          key={itemCount}\n          outerElementType={OuterElementType}\n          innerElementType=\"ul\"\n          itemSize={index => getChildSize(itemData[index])}\n          overscanCount={5}\n          itemCount={itemCount}\n        >\n          {renderRow}\n        </VariableSizeList>\n      </OuterElementContext.Provider>\n    </div>\n  );\n});\n\nListboxComponent.propTypes = {\n  children: PropTypes.node,\n};\n\n\nconst useStyles = makeStyles({\n  listbox: {\n    '& ul': {\n      padding: 0,\n      margin: 0,\n    },\n  },\n});\n\n\n// var indexDump = JSON.parse(รท/รท)\nconsole.time('load')\nconst idx = elasticlunr.Index.load(indexjson)\n\nfunction searchIndex(query){\n    return idx.search(query, {\n                                bool: \"AND\", \n                                expand: true,\n                                // fields: {\n                                //   course_name: {boost: 2},\n                                // }\n                              })\n        .map(({ ref, score }) => idx.documentStore.getDoc(ref))\n        // .filter((c) => c != null)\n        // .map((c) => c.course_name)\n\n}\n\n// const OPTIONS = foo().map((c) => c.course_name);\n\nconst renderGroup = params => [\n  <ListSubheader key={params.key} component=\"div\">\n    {params.key}\n  </ListSubheader>,\n  params.children,\n];\n\nconst filterOptions = (options, { inputValue }) =>\n    searchIndex(inputValue);\n\nexport default function VirtualizedSearch(props) {\n  const classes = useStyles();\n\n  return (\n    <Autocomplete\n      id=\"virtualizedSearch\"\n      style={{ width: 500 }}\n      disableListWrap\n      disableOpenOnFocus\n      classes={classes}\n      ListboxComponent={ListboxComponent}\n      renderGroup={renderGroup}\n      // options={OPTIONS}\n      filterOptions={filterOptions} \n      renderInput={params => (\n        <TextField {...params} variant=\"outlined\" label=\"Search courses\" fullWidth />\n      )}\n      renderOption={option => <Typography noWrap>{option.course_name}</Typography>}\n      getOptionLabel= {(option) => option.course_name}\n      onChange = {(event, value) => {props.setSearchTerm(value)}}\n      value = {props.searchTerm}\n    />\n  );\n}\n\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Search from './Search'\nimport Grid from '@material-ui/core/Grid';\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    display: 'block',\n    marginleft: 'auto',\n    marginright: 'auto',  \n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 7),\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: 120,\n      '&:focus': {\n        width: 200,\n      },\n    },\n  },\n}));\n\nexport default function SearchAppBar(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          {/* TODO: add back */}\n          {/* <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n          >\n            <MenuIcon />\n          </IconButton> */}\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            UT Enzyme\n          </Typography>\n            <div className={classes.search}>\n                <Search searchTerm={props.searchTerm} setSearchTerm={props.setSearchTerm}/>\n            </div>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}","import React from 'react'\nimport { XYPlot, XAxis, YAxis, HorizontalGridLines, VerticalGridLines, VerticalBarSeries } from 'react-vis';\n\n\nfunction Grapher(props) {\n    var { searchTerm, setSearchTerm } = props;\n\n    if (searchTerm == null) return (\n        <div style={{ textAlign: 'center' }}>\n            <br />\n            <br />\n            <h4>Enter in a course name above</h4>\n            <br />\n            <br />\n            <br />\n            <p>This is a prototype, and is not yet a finished product</p>\n            <p>Compare speed to: <a href=\"http://utcatalyst.org/grade-distributions\">UT Catalyst</a></p>\n        </div>)\n        ;\n\n    var course_name = searchTerm.course_name;\n    var course_nbr = searchTerm.course_nbr;\n    var course_prof = searchTerm.prof;\n\n    // I could make a dictionary to map to all of this but I think this is easier to read\n    const keys = [\"a2\", \"a3\", \"b1\", \"b2\", \"b3\", \"c1\", \"c2\", \"c3\", \"d1\", \"d2\", \"d3\", \"f\"]\n    const names = [\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"F\"]\n    var data = keys.map((value, index) => {\n        return { x: names[index], y: searchTerm[value] }\n    })\n\n    console.log(data)\n\n\n    return (\n        <div>\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', paddingTop: '2em' }}>\n                <XYPlot height={300} width={700} xType=\"ordinal\">\n                    <VerticalGridLines />\n                    <HorizontalGridLines />\n                    <XAxis />\n                    <YAxis />\n                    <VerticalBarSeries data={data} />\n                </XYPlot>\n            </div>\n            <div style={{ textAlign: 'center' }}>\n                <br />\n                <br />\n                <br />\n                <p>This is a prototype, and is not yet a finished product</p>\n                <p>Compare speed to: <a href=\"http://utcatalyst.org/grade-distributions\">UT Catalyst</a></p>\n            </div>)\n\n        </div>\n    );\n}\n\nexport default Grapher","import React from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport NavBar from './NavBar'\nimport Grapher from './Grapher'\n\n\nfunction App() {\n  const [searchTerm, setSearchTerm] = React.useState(null);\n  \n  return (\n    <div className=\"App\">\n      <NavBar  searchTerm={searchTerm} setSearchTerm={setSearchTerm} />\n      <Grapher searchTerm={searchTerm} setSearchTerm={setSearchTerm} />\n    </div>\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}